package Final_Project;

import java.util.Scanner;

public class Driver extends User {
    private Ticket[] currentTickets; // Array of Ticket objects
    private boolean warrants; // Boolean for warrants
    private boolean exit = false;
    private String vehiclePlateNumber;

    // Constructor
    public Driver(String name, String trn, String dob, String address, String contactNumber, 
                  Ticket[] currentTickets, boolean warrants) {
        super(name, trn, dob, address, contactNumber); // Call User constructor
        this.currentTickets = currentTickets;
        this.warrants = warrants;
    }

    // Copy Constructor
    private Driver(Driver driver) {
        super(driver.getName(), driver.getTrn(), driver.getDob(), driver.getParish(), driver.getContact_number());
        // Deep copy of the tickets array to avoid shared reference issues
        if (driver.currentTickets == null) {
        	 driver.currentTickets = new Ticket[10]; 
            for (int i = 0; i < driver.currentTickets.length; i++) {
                if (driver.currentTickets[i] != null) {
                    this.currentTickets[i] = new Ticket(driver.currentTickets[i]); // Assuming Ticket has a copy constructor
                }
            }
        }
        this.warrants = driver.warrants;
    }

    // Driver Menu Method
    public void driverMenu(Scanner scanner) {
        System.out.println("Driver Menu: ");
        System.out.println("Please enter your TRN (Taxpayer Registration Number):");
        String trn = scanner.nextLine();

        while (!exit) {
            System.out.println("\nDriver Menu:");
            System.out.println("Please select one of the following options (1-6):");
            System.out.println("1. Check all past tickets");
            System.out.println("2. Make an online payment for tickets");
            System.out.println("3. Check past-due tickets");
            System.out.println("4. View ticket payments that have not passed due");
            System.out.println("5. Check for warrant issued for your arrest");
            System.out.println("6. Exit");

            int choice = scanner.nextInt();
            scanner.nextLine(); // Clear the buffer

            switch (choice) {
                case 1 -> displayPastTickets(trn);
                case 2 -> makePayment(scanner);
                case 3 -> checkPastDueTickets();
                case 4 -> viewUnpaidTickets();
                case 5 -> checkForWarrants();
                case 6 -> {
                    System.out.println("Exiting the driver menu.");
                    exit = true;
                }
                default -> System.out.println("Invalid choice. Please select a number between 1 and 6.");
            }
        }
    }

    private void displayPastTickets(String trn) {
        System.out.println("Displaying all past tickets...");
        boolean ticketFound = false;

        for (Ticket ticket : currentTickets) {
            if (ticket != null && ticket.getDriver().getTrn().equals(trn)) {
                ticketFound = true;
                ticket.displayTicketDetails();
            }
        }

        if (!ticketFound) {
            System.out.println("No tickets found for TRN: " + trn);
        }
    }

    private void makePayment(Scanner scanner) {
        System.out.println("Enter ticket number to pay:");
        String ticketNumber = scanner.nextLine();
        boolean paymentMade = false;

        for (int i = 0; i < currentTickets.length; i++) {
            Ticket ticket = currentTickets[i];
            if (ticket != null && ticket.getTicketNumber().equals(ticketNumber) && ticket.unpaid()) {
                ticket.payTicket();
                currentTickets[i] = null; // Mark the ticket as paid by removing it
                paymentMade = true;
                System.out.println("Payment successful! Fine has been paid.");
                break;
            }
        }

        if (!paymentMade) {
            System.out.println("Ticket not found or already paid.");
        }
    }

    private void checkPastDueTickets() {
        System.out.println("Checking for past-due tickets...");
        boolean overdueFound = false;

        for (Ticket ticket : currentTickets) {
            if (ticket != null && ticket.unpaid()) {
                overdueFound = true;
                ticket.displayTicketDetails();
            }
        }

        if (!overdueFound) {
            System.out.println("No past-due tickets found.");
        }
    }

    private void viewUnpaidTickets() {
        System.out.println("Viewing unpaid tickets...");
        boolean unpaidFound = false;

        for (Ticket ticket : currentTickets) {
            if (ticket != null && ticket.unpaid()) {
                unpaidFound = true;
                ticket.displayTicketDetails();
            }
        }

        if (!unpaidFound) {
            System.out.println("No unpaid tickets found.");
        }
    }

    private void checkForWarrants() {
        if (warrants) {
            System.out.println("A warrant has been issued for your arrest.");
        } else {
            System.out.println("No warrants have been issued for your arrest.");
        }
    }

    public String promptForVehiclePlateNumber() {
        // Create a Scanner instance to read input
        Scanner scanner = new Scanner(System.in);

        System.out.print("Please enter the vehicle plate number: ");
        String inputPlateNumber = scanner.nextLine();  // Use the scanner object to call nextLine()

        // Validate the input
        if (inputPlateNumber == null || inputPlateNumber.trim().isEmpty()) {
            System.out.println("Invalid input. Vehicle plate number cannot be empty.");
        } else {
            this.vehiclePlateNumber = inputPlateNumber.trim();  // Store the plate number
            System.out.println("Vehicle plate number updated successfully: " + this.vehiclePlateNumber);
        }

        // Optionally, close the scanner if no longer needed
        scanner.close();
        
        return inputPlateNumber;
    }


    // toString() method to print Driver's details
    @Override
    public String toString() {
        return "Driver{" +
                "currentTickets=" + java.util.Arrays.toString(currentTickets) +
                ", warrants=" + warrants +
                ", vehiclePlateNumber='" + vehiclePlateNumber + '\'' +
                '}';
    }
}
