package Final_Project;

import java.util.Date;
import java.text.SimpleDateFormat;

public class Ticket {
    private String ticketNumber;
    private String offenceCode;
    private String offenceDescription;
    private double fineAmount;
    private String vehiclePlateNumber;
    private Driver driver = null;
    private JCF_Officer officer;
    private String status; // "Paid" or "Unpaid"
    private Date issueDate;
    private Date dueDate;
    private Date courtDate;

    // Constructor
    public Ticket(String ticketNumber, Date issueDate, String offenceCode, String offenceDescription, 
            double fineAmount, String vehiclePlateNumber, Driver driver, JCF_Officer officer, 
            String status, Date dueDate, Date courtDate) {
  this.ticketNumber = ticketNumber;
  this.issueDate = issueDate;
  this.offenceCode = offenceCode;
  this.offenceDescription = offenceDescription;
  this.fineAmount = fineAmount;
  this.vehiclePlateNumber = vehiclePlateNumber;
  this.driver = driver;
  this.officer = officer;
  this.status = status;
  this.dueDate = dueDate;
  this.courtDate = courtDate;
}


    // Copy Constructor
    public Ticket(Ticket tick) {

    this.ticketNumber = tick.ticketNumber;
    this.offenceCode = tick.offenceCode;
    this.offenceDescription = tick.offenceDescription;
    this.fineAmount = tick.fineAmount;
    this.vehiclePlateNumber = tick.vehiclePlateNumber;
    this.driver = tick.driver;  // Copy the driver reference (this assumes shallow copy; deep copy needed if Driver is mutable)
    this.officer = tick.officer; // Assuming officer is also a reference object
    }
    // Methods

    public String getTicketNumber() {
		return ticketNumber;
	}


	public void setTicketNumber(String ticketNumber) {
		this.ticketNumber = ticketNumber;
	}


	public String getOffenceCode() {
		return offenceCode;
	}


	public void setOffenceCode(String offenceCode) {
		this.offenceCode = offenceCode;
	}


	public String getOffenceDescription() {
		return offenceDescription;
	}


	public void setOffenceDescription(String offenceDescription) {
		this.offenceDescription = offenceDescription;
	}


	public double getFineAmount() {
		return fineAmount;
	}


	public void setFineAmount(double fineAmount) {
		this.fineAmount = fineAmount;
	}


	public String getVehiclePlateNumber() {
		return vehiclePlateNumber;
	}


	public void setVehiclePlateNumber(String vehiclePlateNumber) {
		this.vehiclePlateNumber = vehiclePlateNumber;
	}


	public Driver getDriver() {
		return driver;
	}


	public void setDriver(Driver driver) {
		this.driver = driver;
	}


	public JCF_Officer getOfficer() {
		return officer;
	}


	public void setOfficer(JCF_Officer officer) {
		this.officer = officer;
	}


	public String getStatus() {
		return status;
	}


	public void setStatus(String status) {
		this.status = status;
	}


	public Date getIssueDate() {
		return issueDate;
	}


	public void setIssueDate(Date issueDate) {
		this.issueDate = issueDate;
	}


	public Date getDueDate() {
		return dueDate;
	}


	public void setDueDate(Date dueDate) {
		this.dueDate = dueDate;
	}


	public Date getCourtDate() {
		return courtDate;
	}


	public void setCourtDate(Date courtDate) {
		this.courtDate = courtDate;
	}


	// Pay the ticket
    public void payTicket() {
        if ("Paid".equalsIgnoreCase(this.status)) {
            System.out.println("Ticket already paid.");
            
        } else {
            this.status = "Paid";
            System.out.println("Ticket " + this.ticketNumber + " has been successfully paid.");
        }
    }

    // Check the ticket status
    public void checkTicketStatus() {
        SimpleDateFormat dateFormat = new SimpleDateFormat("dd/MM/yyyy");
        System.out.println("Ticket Status for " + ticketNumber + ":");
        System.out.println("Status: " + status);
        if ("Unpaid".equalsIgnoreCase(status) && dueDate.before(new Date())) {
            System.out.println("The ticket is overdue.");
            if (courtDate != null) {
                System.out.println("Court Date: " + dateFormat.format(courtDate));
            }
        } else if ("Unpaid".equalsIgnoreCase(status)) {
            System.out.println("Due Date: " + dateFormat.format(dueDate));
        }
    }

    // Display ticket details
    public void displayTicketDetails() {
        SimpleDateFormat dateFormat = new SimpleDateFormat("dd/MM/yyyy");
        System.out.println("Ticket Number: " + ticketNumber);
        System.out.println("Offence Code: " + offenceCode);
        System.out.println("Description: " + offenceDescription);
        System.out.println("Fine Amount: $" + fineAmount);
        System.out.println("Issue Date: " + dateFormat.format(issueDate));
        System.out.println("Due Date: " + dateFormat.format(dueDate));
        System.out.println("Status: " + status);
        if (courtDate != null) {
            System.out.println("Court Date: " + dateFormat.format(courtDate));
        }
        System.out.println("---------------------------");
    }

    // New Methods

    // Method to check if a ticket is outstanding (Unpaid and overdue)
    public boolean checkOutstandingTickets() {
        if ("Unpaid".equalsIgnoreCase(status) && dueDate.before(new Date())) {
            System.out.println("Ticket " + ticketNumber + " is outstanding (Unpaid and overdue).");
            return true; // Ticket is outstanding
        }
        return false; // Ticket is not outstanding
    }

    // Method to check if a ticket is unpaid
    public boolean unpaid() {
        boolean isUnpaid = "Unpaid".equalsIgnoreCase(status);
        if (isUnpaid) {
            System.out.println("Ticket " + ticketNumber + " is unpaid.");
        }
        return isUnpaid;
    }

    // Static method to issue a ticket
    public static Ticket issueTicket(String ticketNumber, String offenceCode, String offenceDescription,
                                     double fineAmount, Date issueDate, Driver driver, JCF_Officer officer,
                                     int dueInDays, String status, Date courtDate) {
        // Calculate due date by adding the specified number of days to the issue date
        Date dueDate = new Date(issueDate.getTime() + (dueInDays * 24L * 60L * 60L * 1000L));
        // Return a new Ticket with the correct parameters
        return new Ticket(ticketNumber, issueDate, offenceCode, offenceDescription, fineAmount,
                driver.promptForVehiclePlateNumber(), driver, officer, status, dueDate, courtDate);
    }
}
