package Final_Project;

import java.util.Date;
import java.util.InputMismatchException;
import java.util.Scanner;
import java.io.ObjectOutputStream;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.ObjectInputStream;
import java.util.Calendar;

public class JCF_Officer extends User {
    private String badgeNumber;
    private String policeStation;
    private static Ticket[] currentTickets;  // Array to store current tickets
    private static Driver[] drivers;         // Array to store drivers
    private int ticketCount = 0;      // Tracks number of tickets in the array
    private int driverCount = 0;      // Tracks number of drivers in the array
    private int maxTickets = 50;      // Maximum tickets the officer can manage
    private JCF_Officer officer = null;

    // Constructor
    public JCF_Officer(String name, String trn, String dob, String parish, String contactNumber) {
        super(name, trn, dob, parish, contactNumber); // Directly pass arguments to the parent constructor
        this.badgeNumber = "";
        this.policeStation = "";
        JCF_Officer.currentTickets = new Ticket[100];  // Default size for currentTickets
        JCF_Officer.drivers = new Driver[10]; // Default size for drivers
    }

    // Method to prompt for user information
    public void promptForUserInfo() {
        Scanner scanner = new Scanner(System.in);

        // Prompt for name
        System.out.println("Enter your full name:");
        this.name = scanner.nextLine();

        // Prompt for TRN
        System.out.println("Enter your TRN:");
        this.trn = scanner.nextLine();

        // Prompt for Date of Birth
        System.out.println("Enter your Date of Birth (MM/DD/YYYY):");
        this.dob = scanner.nextLine();

        // Prompt for Parish (with validation)
        this.parish = promptForParish();  // We assume promptForParish is defined

        // Prompt for contact number
        System.out.println("Enter your contact number:");
        this.contact_number = scanner.nextLine();
    }

    // Prompt for parish with validation (example: list of Jamaica's parishes)
    private static String promptForParish() {
        String[] validParishes = {
            "1. Kingston", "2. St. Andrew", "3. St. Thomas", "4. Portland", "5. St. Mary", 
            "6. St. Ann", "7. Trelawny", "8. St. James", "9. Hanover", "10. Westmoreland", 
            "11. St. Elizabeth", "12. Manchester", "13. Clarendon", "14. St. Catherine", "Parish"
        };

        Scanner scanner = new Scanner(System.in);
        String parish = "";

        while (true) {
            System.out.println("Select your Parish:");
            for (int i = 0; i < validParishes.length; i++) {
                System.out.println((i + 1) + ". " + validParishes[i]);
            }

            int choice = scanner.nextInt();
            scanner.nextLine();  // Consume newline character

            if (choice >= 1 && choice <= validParishes.length) {
                parish = validParishes[choice - 1];
                break;
            } else {
                System.out.println("Invalid choice, please select a valid parish.");
            }
        }

        return parish;
    }

    // Method to view all outstanding tickets sorted by parish
    public static void viewAllOutstandingTicketsSortedByParish() {
        // Get the parish from the user
        String selectedParish = promptForParish();

        System.out.println("\n--- Outstanding Tickets in " + selectedParish + " ---");
        boolean found = false;

        // Loop through the tickets and display information for the selected parish
        for (Ticket ticket : currentTickets) {
            if (ticket != null && ticket.getStatus().equalsIgnoreCase("Unpaid")
                    && ticket.getDriver().getParish().equalsIgnoreCase(selectedParish)) {
                System.out.println(ticket); // Ensure Ticket.toString() is implemented to print ticket details
                found = true;
            }
        }

        if (!found) {
            System.out.println("No outstanding tickets found in " + selectedParish + ".");
        }
    }

    // Method to prompt for parish with validation
    private String searchbyParish() {
        Scanner scanner = new Scanner(System.in);
        String[] validParishes = {
            "Kingston", "St. Andrew", "St. Thomas", "Portland", "St. Mary", 
            "St. Ann", "Trelawny", "St. James", "Hanover", "Westmoreland", 
            "St. Elizabeth", "Manchester", "Clarendon", "St. Catherine"
        };

        while (true) {
            System.out.println("Enter a parish from the following options:");
            for (String parish : validParishes) {
                System.out.print(parish + ", ");
            }
            System.out.println(); // Move to next line
            String input = scanner.nextLine();

            for (String parish : validParishes) {
                if (input.equalsIgnoreCase(parish)) {
                    return parish; // Valid parish found
                }
            }
            System.out.println("Invalid parish. Please try again.");
        }
    }

 // Prompt user and add a new ticket
 // Prompt user and add a new ticket
    public static void promptAndAddNewTicket(JCF_Officer officer, int ticketCount) {
       
        if (currentTickets == null) {
            System.out.println("Error: Ticket array is not initialized.");
            return;  // Or initialize it here
        }
    	Scanner scanner = new Scanner(System.in);

        System.out.println("Enter Ticket Number:");
        String ticketNumber = scanner.nextLine();

        System.out.println("Enter Offence Code:");
        String offenceCode = scanner.nextLine();

        // Create a Fine object to handle fine calculation
        Fine fine = calculateFine(offenceCode);  // Pass offenceCode as a parameter
        System.out.println("Fine Amount: " + fine.getFineAmount());

        System.out.println("Enter Offence Description:");
        String offenceDescription = scanner.nextLine();

        System.out.println("Enter Vehicle Plate Number:");
        String vehiclePlateNumber = scanner.nextLine();

        // Prompt for driver details
        System.out.println("Enter Driver's Name:");
        String driverName = scanner.nextLine();

        System.out.println("Enter Driver's License Number:");
        String licenseNumber = scanner.nextLine();

        Driver driver = new Driver(driverName, licenseNumber, vehiclePlateNumber, licenseNumber, licenseNumber, currentTickets, false); // Create a new driver instance

        // Ensure array has capacity
        /*if (ticketCount >= currentTickets.length) {
            System.out.println("Ticket array is full. Cannot add more tickets.");
            return;
        }*/

        // Use calculateDueDate method to determine the due date
        Date issueDate = new Date();
        Date dueDate = calculateDueDate();
        Date courtDate = null;  // You can set a default court date or leave it null
        String status = "Unpaid";

        // Create a ticket object
        Ticket ticket = new Ticket(ticketNumber, issueDate, offenceCode, offenceDescription, 
                fine.getFineAmount(), vehiclePlateNumber, driver, officer, status, dueDate, courtDate);

        // Display ticket info and prompt for confirmation
        boolean isConfirmed = viewAndConfirmTicket(ticket);
        if (isConfirmed) {
            currentTickets[ticketCount++] = ticket; // Add ticket to the array
            writeTicketsToFile();
            System.out.println("Ticket Added Successfully!");
        } else {
            System.out.println("Ticket entry was cancelled. Please re-enter the details.");
            promptAndAddNewTicket(officer, ticketCount); // Ask for details again if not confirmed
        }
    }


    // Method to check unpaid tickets past 21 days
    public static void checkUnpaidTickets() {
        Scanner scanner = new Scanner(System.in);
        System.out.println("Enter the Driver's TRN to check unpaid tickets:");
        String trn = scanner.nextLine();

        // Find the driver by TRN
        Driver driver = findDriverByTrn(trn);
        if (driver == null) {
            System.out.println("Driver not found.");
            return;
        }

        // Check for unpaid tickets that have passed the 21-day due date
        boolean hasUnpaidTickets = false;
        Date currentDate = new Date();

        for (Ticket ticket : currentTickets) {
            if (ticket != null 
                    && ticket.getDriver().getTrn().equals(trn) 
                    && ticket.getStatus().equalsIgnoreCase("Unpaid")) {
                if (ticket.getDueDate().before(currentDate)) {
                    long diffInMillies = Math.abs(currentDate.getTime() - ticket.getDueDate().getTime());
                    long diffInDays = diffInMillies / (24 * 60 * 60 * 1000);
                    if (diffInDays > 21) {
                        System.out.println("Ticket " + ticket.getTicketNumber() + " is unpaid and past the 21-day due date.");
                        hasUnpaidTickets = true;
                    }
                }
            }
        }

        if (!hasUnpaidTickets) {
            System.out.println("No unpaid tickets past the 21-day stipulation.");
        }
    }
    // Method to find driver by TRN
    private static Driver findDriverByTrn(String trn) {
        for (Driver driver : drivers) {
            if (driver != null && driver.getTrn().equals(trn)) {
                return driver;
            }
        }
        return null;
    }

    // Method to find driver by vehicle plate number
    private static Driver findDriverByPlate(String plateNumber) {
        for (Driver driver : drivers) {
            if (driver != null && driver.promptForVehiclePlateNumber().equals(plateNumber)) {
                return driver;
            }
        }
        return null;
    }

    private static Fine calculateFine(String offenceCode) {
        float fineAmount;
        String fineType = "";
        String fineDescription = "";

        switch (offenceCode) {
            case "1":
                fineAmount = 5000.0f;
                fineType = "Speeding";
                fineDescription = "Exceeding speed limit";
                break;
            case "2":
                fineAmount = 3000.0f;
                fineType = "Parking";
                fineDescription = "Illegal parking";
                break;
            default:
                fineAmount = 1000.0f;
                fineType = "General";
                fineDescription = "General offence";
                break;
        }

        return new Fine(fineAmount, fineType, fineDescription);
    }

    // Method to calculate due date (21 days from issue date)
    private static Date calculateDueDate() {
        Calendar calendar = Calendar.getInstance();
        calendar.setTime(new Date()); // Set current date
        calendar.add(Calendar.DAY_OF_YEAR, 21); // Add 21 days
        return calendar.getTime();
    }

    // Method to display ticket and prompt user to confirm
    private static boolean viewAndConfirmTicket(Ticket ticket) {
        System.out.println("Ticket Details:");
        System.out.println("Ticket Number: " + ticket.getTicketNumber());
        System.out.println("Offence: " + ticket.getOffenceDescription());
        System.out.println("Fine: " + ticket.getFineAmount());
        System.out.println("Vehicle Plate: " + ticket.getVehiclePlateNumber());
        System.out.println("Due Date: " + ticket.getDueDate());

        Scanner scanner = new Scanner(System.in);
        System.out.println("Do you want to confirm this ticket? (yes/no)");
        String confirmation = scanner.nextLine();

        return confirmation.equalsIgnoreCase("yes");
    }

    // Method to write tickets to file
    private static void writeTicketsToFile() {
        try (ObjectOutputStream out = new ObjectOutputStream(new FileOutputStream("tickets.dat"))) {
            for (Ticket ticket : currentTickets) {
                if (ticket != null) {
                    out.writeObject(ticket);
                }
            }
        } catch (IOException e) {
            System.out.println("Error writing tickets to file: " + e.getMessage());
        }
    }

    // Method to load tickets from file
    private void loadTicketsFromFile() {
        try (ObjectInputStream in = new ObjectInputStream(new FileInputStream("tickets.dat"))) {
            while (true) {
                Ticket ticket = (Ticket) in.readObject();
                if (ticket != null) {
                    currentTickets[ticketCount++] = ticket;
                }
            }
        } catch (IOException | ClassNotFoundException e) {
            System.out.println("Error loading tickets from file: " + e.getMessage());
        }
    }

    // Method to display all tickets
    public static void displayAllTickets() {
        System.out.println("--- All Tickets ---");
        for (Ticket ticket : currentTickets) {
            if (ticket != null) {
                System.out.println(ticket);
            }
        }
    }

    // Method to add a driver to the driver list
    public void addDriver(Driver driver) {
        if (driverCount < drivers.length) {
            drivers[driverCount++] = driver;
        } else {
            System.out.println("Driver list is full.");
        }
    }

    // Method to display all drivers
    public void displayAllDrivers() {
        System.out.println("--- All Drivers ---");
        for (Driver driver : drivers) {
            if (driver != null) {
                System.out.println(driver);
            }
        }
    }
    
    public static void jcfOfficerMenu(Scanner scanner, JCF_Officer officer, int ticketCount, Ticket[] currentTickets) {
        boolean exitOfficerMenu = false;

        while (!exitOfficerMenu) {
            // Display Officer Menu
            System.out.println("\n--- JCF Officer Menu ---");
            System.out.println("1. Add Ticket");
            System.out.println("2. Check Driver Status");
            System.out.println("3. View All Tickets");
            System.out.println("4. Exit Officer Menu");

            System.out.print("Enter your choice: ");
            int officerChoice = scanner.nextInt();
            scanner.nextLine(); // Consume newline

            switch (officerChoice) {
                case 1: // Add Ticket
                    // Call the method promptAndAddNewTicket
                    promptAndAddNewTicket(officer, ticketCount);
                    break;

                case 2: // Check Driver Status
                    System.out.println("Select What you would like to do:");
                    System.out.println("1. Check Unpaid Tickets Past 21 Days");
                    System.out.println("2. View All Outstanding Tickets by Parish");
                    int driverChoice = scanner.nextInt();
                    scanner.nextLine(); // Consume newline
                    
                    switch (driverChoice) {
                        case 1: // Check unpaid tickets past 21 days
                            checkUnpaidTickets();
                            break;
                        case 2: // View outstanding tickets by parish
                            viewAllOutstandingTicketsSortedByParish();
                            break;
                        default:
                            System.out.println("Invalid choice. Returning to menu.");
                    }
                    break;

                case 3: // View All Tickets
                    displayAllTickets();
                    break;

                case 4: // Exit Officer Menu
                    exitOfficerMenu = true;
                    System.out.println("Exiting Officer Menu...");
                    break;

                default:
                    System.out.println("Invalid choice. Please try again.");
            }
        }
    }

    
    }

