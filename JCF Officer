package Final_Project;

import java.util.List;
import java.util.ArrayList;
import java.util.Scanner;
import java.io.ObjectOutputStream;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.ObjectInputStream;

public class JCF_Officer extends User {
    private String badgeNumber;
    private String policeStation;
    private List<Ticket> currentTickets;  // Changed to List<Ticket>

   
    // Constructor
    public JCF_Officer(String name, String trn, String dob, String address, String contact_number, String badgeNumber, String policeStation, List<Ticket> currentTickets)
    {
        super(name, trn, dob, address, contact_number);
        this.badgeNumber = badgeNumber;
        this.policeStation = policeStation;
        this.currentTickets = currentTickets != null ? currentTickets : new ArrayList<>(); // Initialize list if null
    }

    // Prompt user and add a new ticket
    public void promptAndAddNewTicket() {
        Scanner scanner = new Scanner(System.in);

        System.out.println("Enter Ticket Number:");
        String ticketNumber = scanner.nextLine();  // Read the ticket number

        System.out.println("Enter Offence Code:");
        String offenceCode = scanner.nextLine();  // Read the offence code

        System.out.println("Enter Offence Description:");
        String offenceDescription = scanner.nextLine();  // Read the offence description

        System.out.println("Enter Fine Amount:");
        double fineAmount = scanner.nextDouble();  // Read fine amount

        scanner.nextLine();  // Consume newline

        System.out.println("Enter Vehicle Plate Number:");
        String vehiclePlateNumber = scanner.nextLine();  // Read vehicle plate number


        // Create a new Driver and Officer objects 
        Driver driver = new Driver("Bobby Clarke", "TRN123", "01-01-1990", "Address", "555-5678", 15000, "Speeding", "Driver was speeding on Highway", "N/A", "False");
        JCF_Officer officer = this;  // The officer who is issuing the ticket

        // Create the new ticket with current date
        Ticket ticket = new Ticket("12345", new java.util.Date(), "A01", "Speeding", (float) fineAmount, "ABC123", driver, officer);

        // Add the ticket to the list
        currentTickets.add(ticket);  
        
        // Write to file after adding the ticket
        writeTicketsToFile();
        System.out.println("Ticket Added Successfully!");
    }
    
    public void promptAndRetrieveTicket() {
        Scanner scanner = new Scanner(System.in);

        // Ask for ticket number
        System.out.println("Enter the ticket number to retrieve:");
        String ticketNumber = scanner.nextLine();  // Read the ticket number to retrieve

        // Retrieve the ticket by its number
        Ticket ticket = getTicketByNumber(ticketNumber);

        if (ticket != null) {
            // If ticket is found, print the ticket details
            System.out.println("Ticket retrieved: " + ticket);
        } else {
            // If ticket is not found, display a message
            System.out.println("Ticket not found.");
        }
    }

    // Method to find a ticket by ticket number
    private Ticket getTicketByNumber(String ticketNumber) {
        for (Ticket ticket : currentTickets) {
            if (ticket.getTicketnumber().equals(ticketNumber)) {
                return ticket;  // Return ticket if found
            }
        }
        return null;  // Return null if ticket is not found
    }

    // Method to prompt and delete a ticket based on ticket number
    public void promptAndDeleteTicket() {
        Scanner scanner = new Scanner(System.in);

        // Ask for ticket number
        System.out.println("Enter the ticket number to delete:");
        String ticketNumber = scanner.nextLine();  // Read the ticket number to delete

        // Try to delete the ticket by its number
        boolean success = deleteTicket(ticketNumber);

        if (success) {
            // If deletion is successful, display a success message
            System.out.println("Ticket deleted successfully.");
        } else {
            // If ticket is not found, display a failure message
            System.out.println("Ticket not found.");
        }
    }

    // Method to delete a ticket from the list by ticket number
    private boolean deleteTicket(String ticketNumber) {
        Ticket ticket = getTicketByNumber(ticketNumber);
        if (ticket != null) {
            currentTickets.remove(ticket);  // Remove the ticket if found
            return true;  // Indicate that the deletion was successful
        }
        return false;  // Return false if the ticket was not found
    }


    // Method to write the current tickets to a file (for persistence)
    private void writeTicketsToFile() {
        try (ObjectOutputStream out = new ObjectOutputStream(new FileOutputStream("tickets.dat"))) {
            out.writeObject(currentTickets);
        } catch (IOException e) {
            System.out.println("Error writing to file: " + e.getMessage());
        }
    }

    // Method to read tickets from file
    public void readTicketsFromFile() {
        try (ObjectInputStream in = new ObjectInputStream(new FileInputStream("tickets.dat"))) {
            currentTickets = (List<Ticket>) in.readObject();
        } catch (IOException | ClassNotFoundException e) {
            System.out.println("Error reading from file: " + e.getMessage());
        }
    }

    // Main Menu to interact with the officer
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);

        // Create a JCF_Officer instance (with a maximum of 10 tickets for simplicity)
        JCF_Officer officer = new JCF_Officer("John Doe", "TRN12345", "01-01-1980", "123 Main St", "555-1234", "B123", "Kingston", new ArrayList<>());

        // Read the tickets from the file if available
        officer.readTicketsFromFile();

        // Simple menu for interacting with the officer
        while (true) {
            System.out.println("\n--- Menu ---");
            System.out.println("1. Add New Ticket");
            System.out.println("2. Retrieve Ticket");
            System.out.println("3. Delete Ticket");
            System.out.println("4. Exit");
            int choice = scanner.nextInt();
            scanner.nextLine();  // Consume newline

            switch (choice) {
                case 1:
                    officer.promptAndAddNewTicket();
                    break;
                case 2:
                    officer.promptAndRetrieveTicket();
                    break;
                case 3:
                    officer.promptAndDeleteTicket();
                    break;
                case 4:
                    System.out.println("Exiting...\n");
                    return;
                default:
                    System.out.println("Invalid choice, please try again.");
            }
        }
    }
}
