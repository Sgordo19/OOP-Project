package Final_Project;

import java.util.Date;
import java.util.Scanner;
import java.io.ObjectOutputStream;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.ObjectInputStream;
import java.util.Calendar;

public class JCF_Officer extends User {
    private String badgeNumber;
    private String policeStation;
    private Ticket[] currentTickets;  // Array to store current tickets
    private Driver[] drivers;         // Array to store drivers
    private int ticketCount = 0;      // Tracks number of tickets in the array
    private int driverCount = 0;      // Tracks number of drivers in the array
    private int maxTickets = 50;      // Maximum tickets the officer can manage
    private JCF_Officer officer = null;

    // Constructor
    public JCF_Officer(String name, String trn, String dob, String address, String contact_number,
                       String badgeNumber, String policeStation, Ticket[] currentTickets, Driver[] drivers) {
        super(name, trn, dob, address, contact_number);
        this.badgeNumber = badgeNumber;
        this.policeStation = policeStation;
        this.currentTickets = currentTickets != null ? currentTickets : new Ticket[maxTickets];  // Default size
        this.drivers = drivers != null ? drivers : new Driver[10]; // Default size for drivers
    }

    // Prompt user and add a new ticket
    public void promptAndAddNewTicket() {
        Scanner scanner = new Scanner(System.in);

        System.out.println("Enter Ticket Number:");
        String ticketNumber = scanner.nextLine();

        System.out.println("Enter Offence Code:");
        String offenceCode = scanner.nextLine();

        // Create a Fine object to handle fine calculation
        Fine fine = calculateFine(offenceCode);
        System.out.println("Fine Amount: " + fine.getFineAmount());

        System.out.println("Enter Offence Description:");
        String offenceDescription = scanner.nextLine();

        System.out.println("Enter Vehicle Plate Number:");
        String vehiclePlateNumber = scanner.nextLine();

        Driver driver = findDriverByPlate(vehiclePlateNumber); // Call the newly defined method
        if (driver == null) {
            System.out.println("Driver not found for the given vehicle plate number.");
            return;
        }

        // Ensure array has capacity
        if (ticketCount >= currentTickets.length) {
            System.out.println("Ticket array is full. Cannot add more tickets.");
            return;
        }

        // Use calculateDueDate method to determine the due date
        Date issueDate = new Date();
        Date dueDate = calculateDueDate();
        Date courtDate = null;  // You can set a default court date or leave it null
        String status = "Unpaid";

        // Create and add ticket
        Ticket ticket = new Ticket(ticketNumber, issueDate, offenceCode, offenceDescription, 
                fine.getFineAmount(), vehiclePlateNumber, driver, officer, status, dueDate, courtDate);

        currentTickets[ticketCount++] = ticket; // Add ticket to the array
        writeTicketsToFile();
        System.out.println("Ticket Added Successfully!");
    }

    // Find driver by vehicle plate
    private Driver findDriverByPlate(String plateNumber) {
        for (int i = 0; i < driverCount; i++) {
            if (drivers[i] != null && drivers[i].getVehiclePlateNumber().equalsIgnoreCase(plateNumber)) {
                return drivers[i];
            }
        }
        return null;
    }

    // Calculate fine based on offence code and return a Fine object
    private Fine calculateFine(String offenceCode) {
        float fineAmount;
        String fineType = "";
        String fineDescription = "";

        // Example logic: Assign fine based on offenceCode
        switch (offenceCode) {
            case "SPEED01":
                fineAmount = 5000.0f;
                fineType = "Speeding";
                fineDescription = "Exceeding speed limit";
                break;
            case "PARK02":
                fineAmount = 3000.0f;
                fineType = "Parking";
                fineDescription = "Illegal parking";
                break;
            default:
                fineAmount = 1000.0f;
                fineType = "General";
                fineDescription = "General offence";
                break;
        }

        return new Fine(fineAmount, fineType, fineDescription);
    }

    // Calculate due date, adding 30 days to the current date
    private Date calculateDueDate() {
        Calendar calendar = Calendar.getInstance();
        calendar.add(Calendar.DATE, 30);
        return calendar.getTime();
    }

    // Prompt and retrieve ticket
    public void promptAndRetrieveTicket() {
        Scanner scanner = new Scanner(System.in);

        System.out.println("Enter the ticket number to retrieve:");
        String ticketNumber = scanner.nextLine();

        Ticket ticket = getTicketByNumber(ticketNumber);
        if (ticket != null) {
            System.out.println("Ticket retrieved: " + ticket);
        } else {
            System.out.println("Ticket not found.");
        }
    }

    // Get ticket by number
    private Ticket getTicketByNumber(String ticketNumber) {
        for (int i = 0; i < ticketCount; i++) {
            if (currentTickets[i] != null && currentTickets[i].getTicketNumber().equals(ticketNumber)) {
                return currentTickets[i];
            }
        }
        return null;
    }

    // Prompt and delete ticket
    public void promptAndDeleteTicket() {
        Scanner scanner = new Scanner(System.in);

        System.out.println("Enter the ticket number to delete:");
        String ticketNumber = scanner.nextLine();

        boolean success = deleteTicket(ticketNumber);
        System.out.println(success ? "Ticket deleted successfully." : "Ticket not found.");
    }

    // Delete ticket
    private boolean deleteTicket(String ticketNumber) {
        for (int i = 0; i < ticketCount; i++) {
            if (currentTickets[i] != null && currentTickets[i].getTicketNumber().equals(ticketNumber)) {
                for (int j = i; j < ticketCount - 1; j++) {
                    currentTickets[j] = currentTickets[j + 1];
                }
                currentTickets[--ticketCount] = null;
                return true;
            }
        }
        return false;
    }

    // Write tickets to file
    private void writeTicketsToFile() {
        try (ObjectOutputStream out = new ObjectOutputStream(new FileOutputStream("tickets.dat"))) {
            out.writeObject(currentTickets);
        } catch (IOException e) {
            System.out.println("Error writing to file: " + e.getMessage());
        }
    }

    // Read tickets from file
    public void readTicketsFromFile() {
        try (ObjectInputStream in = new ObjectInputStream(new FileInputStream("tickets.dat"))) {
            Ticket[] loadedTickets = (Ticket[]) in.readObject();
            if (loadedTickets != null) {
                currentTickets = loadedTickets;
                ticketCount = (int) java.util.Arrays.stream(loadedTickets).filter(t -> t != null).count();
            }
        } catch (IOException | ClassNotFoundException e) {
            System.out.println("Error reading from file: " + e.getMessage());
        }
    }

    // Write drivers to file
    public void writeDriversToFile() {
        try (ObjectOutputStream out = new ObjectOutputStream(new FileOutputStream("drivers.dat"))) {
            out.writeObject(drivers);
        } catch (IOException e) {
            System.out.println("Error writing to file: " + e.getMessage());
        }
    }

    // Read drivers from file
    public void readDriversFromFile() {
        try (ObjectInputStream in = new ObjectInputStream(new FileInputStream("drivers.dat"))) {
            Driver[] loadedDrivers = (Driver[]) in.readObject();
            if (loadedDrivers != null) {
                drivers = loadedDrivers;
                driverCount = (int) java.util.Arrays.stream(loadedDrivers).filter(d -> d != null).count();
            }
        } catch (IOException | ClassNotFoundException e) {
            System.out.println("Error reading from file: " + e.getMessage());
        }
    }

    // Main Menu to interact with the officer
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);

        // Create a JCF_Officer instance (with an empty array of tickets and drivers)
        JCF_Officer officer = new JCF_Officer("John Doe", "TRN12345", "01-01-1980", "123 Main St", "555-1234", "B123", "Kingston", new Ticket[10], new Driver[10]);

        // Read the tickets and drivers from the files if available
        officer.readTicketsFromFile();
        officer.readDriversFromFile();

        // Simple menu for interacting with the officer
        while (true) {
            System.out.println("\n--- Menu ---");
            System.out.println("1. Add New Ticket");
            System.out.println("2. Retrieve Ticket");
            System.out.println("3. Delete Ticket");
            System.out.println("4. Exit");
            int choice = scanner.nextInt();
            scanner.nextLine();  // Consume newline

            switch (choice) {
                case 1:
                    officer.promptAndAddNewTicket();
                    break;
                case 2:
                    officer.promptAndRetrieveTicket();
                    break;
                case 3:
                    officer.promptAndDeleteTicket();
                    break;
                case 4:
                    System.out.println("Exiting...");
                    officer.writeTicketsToFile();
                    officer.writeDriversToFile();
                    return;
                default:
                    System.out.println("Invalid choice. Try again.");
            }
        }
    }
}
